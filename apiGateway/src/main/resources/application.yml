server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  cloud:
    config:
      uri: http://127.0.0.1:8000
      name: user-service

    gateway:
      default-filters:
        - name: GlobalFilter #??? ??? ??? ??
          args:
            baseMessage: Spring Cloud Gateway Global Filter #??? ??? ??? ?? baseMessaege?????? ??? ?? ??
            preLogger: true
            postLogger: true


        #        - id: user-service #user-service에 대한 라우팅 설정
        #          uri: lb://USER-SERVICE # 유레카에 등록된 서비스를 적어줘야 함
        #          predicates:
        #              - Path=/user-service/**

        # Security가 적용된 라우팅
      routes:
        #login -> no need authorization
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie #post로 전달되는 데이터는 매번 새롭게 인식하는 것처럼 하기위해서 쿠키 제거
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} #/user-service/(?<segment>.*) 이형태로 데이터가 들어오면   /$\{segment} 이렇게 바꾸겠다
              #이렇게 작성하게되면 더이상 controller에 RequestMapping(user-service) 안해도됨

        #sign up -> no need authorization
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}


        #need authorization
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter # write class name to add filter!!!!!!!!!!!!


        #actuator 추가
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}


        - id: catalog-service #Catalog service
          uri: lb://CATALOG-SERVICE # 유레카에 등록된 서비스를 적어줘야 함
          predicates:
            - Path=/catalog-service/**

        - id: order-service #Catalog service
          uri: lb://ORDER-SERVICE # 유레카에 등록된 서비스를 적어줘야 함
          predicates:
            - Path=/order-service/**


        - id: first-service
          uri: lb://MY-FIRST-SERVICE
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-reqeust-header2
#            - AddResponseHeader=first-request, first-response-header2
             - CustomFilter #??? ??? ??? ??? ??
             # ??? ?? pre??? Logging ??? ?? ???
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-reqeust-header2
#            - AddResponseHeader=second-request, second-response-header2
             - name: CustomFilter
             - name: LoggingFilter #?? ?? ???? ???? ??, ??? 2????? name?? ????? ?
               args:
                 baseMessage: Logging, filter.
                 preLogger: true
                 postLogger: true

# jwt 복호화를 위해 user-service에서 갖고옴
#token:
#  expiration_time: 86400000
#  secret: user_token


#actuator 정보 추가
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh
